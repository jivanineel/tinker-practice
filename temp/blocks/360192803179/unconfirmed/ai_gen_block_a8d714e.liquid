{% doc %}
  @prompt
    i want slider like my shop by category card desktop screen is perfect windows size change small than its slider

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-category-slider-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-category-slider__container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-category-slider__header-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 40px;
  }

  .ai-category-slider__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0 0 16px;}

  .ai-category-slider__subtitle-{{ ai_gen_id }} {
    font-size: {{ block.settings.subheading_size }}px;
    color: {{ block.settings.text_color }};
    opacity: 0.8;
    margin: 0;
  }

  .ai-category-slider__wrapper-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
  }

  .ai-category-slider__track-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.desktop_columns }}, 1fr);
    gap: {{ block.settings.card_spacing }}px;
    transition: transform 0.3s ease;
  }

  .ai-category-card-{{ ai_gen_id }} {
    position: relative;
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    background-color: {{ block.settings.card_background }};
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;text-decoration: none;
    color: inherit;
  }

  .ai-category-card-{{ ai_gen_id }}:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }

  .ai-category-card__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.card_height }}px;
    overflow: hidden;
  }

  .ai-category-card__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;transition: transform 0.3s ease;
  }

  .ai-category-card-{{ ai_gen_id }}:hover .ai-category-card__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-category-card__image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-category-card__image-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-category-card__overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0.7) 100%);
    display: flex;
    align-items: flex-end;
    padding: 24px;
  }

  .ai-category-card__content-{{ ai_gen_id }} {
    color: white;
    text-align: center;
    width: 100%;}

  .ai-category-card__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.card_title_size }}px;
    font-weight: 600;
    margin: 0 0 8px;
  }

  .ai-category-card__count-{{ ai_gen_id }} {
    font-size:14px;
    opacity: 0.9;
    margin: 0;
  }

  .ai-category-slider__navigation-{{ ai_gen_id }} {
    display: none;
    justify-content: center;
    gap: 16px;
    margin-top: 24px;
  }

  .ai-category-slider__nav-button-{{ ai_gen_id }} {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
  }

  .ai-category-slider__nav-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-category-slider__nav-button-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .ai-category-slider__dots-{{ ai_gen_id }} {
    display: none;
    justify-content: center;
    gap: 8px;
    margin-top: 16px;
  }

  .ai-category-slider__dot-{{ ai_gen_id }} {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: rgba(0, 0, 0, 0.3);
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .ai-category-slider__dot-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.button_color }};
  }

  @media screen and (max-width: 768px) {
    .ai-category-slider__track-{{ ai_gen_id }} {
      grid-template-columns: repeat(20, calc(80vw - 40px));
      gap: 16px;
      padding: 0 20px;
      scroll-snap-type: x mandatory;
      overflow-x: auto;scrollbar-width: none;
      -ms-overflow-style: none;
    }

    .ai-category-slider__track-{{ ai_gen_id }}::-webkit-scrollbar {
      display: none;
    }

    .ai-category-card-{{ ai_gen_id }} {
      scroll-snap-align: start;
      min-width: 0;
    }

    .ai-category-slider__navigation-{{ ai_gen_id }} {
      display: flex;}

    .ai-category-slider__dots-{{ ai_gen_id }} {
      display: flex;
    }

    .ai-category-slider__wrapper-{{ ai_gen_id }} {
      overflow: visible;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-category-slider__track-{{ ai_gen_id }} {
      grid-template-columns: repeat(20, calc(90vw - 40px));
    }

    .ai-category-card__overlay-{{ ai_gen_id }} {
      padding: 16px;
    }

    .ai-category-card__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.card_title_size | times: 0.9 }}px;
    }
  }
{% endstyle %}

<category-slider-{{ ai_gen_id }}
  class="ai-category-slider-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-category-slider__container-{{ ai_gen_id }}">
    {% if block.settings.heading != blank or block.settings.subheading != blank %}
      <div class="ai-category-slider__header-{{ ai_gen_id }}">
        {% if block.settings.heading != blank %}
          <h2 class="ai-category-slider__title-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
        {% endif %}
        {% if block.settings.subheading != blank %}
          <p class="ai-category-slider__subtitle-{{ ai_gen_id }}">{{ block.settings.subheading }}</p>
        {% endif %}
      </div>
    {% endif %}

    <div class="ai-category-slider__wrapper-{{ ai_gen_id }}">
      <div class="ai-category-slider__track-{{ ai_gen_id }}" data-track>
        {% for i in (1..8) %}
          {% liquid
            assign collection_key = 'collection_' | append: i
            assign collection = block.settings[collection_key]%}
          
          {% if collection != blank %}
            <a href="{{ collection.url }}" class="ai-category-card-{{ ai_gen_id }}">
              <div class="ai-category-card__image-wrapper-{{ ai_gen_id }}">
                {% if collection.featured_image %}
                  <img
                    src="{{ collection.featured_image | image_url: width: 400 }}"
                    alt="{{ collection.featured_image.alt | escape }}"
                    class="ai-category-card__image-{{ ai_gen_id }}"
                loading="lazy"
                width="400"
                    height="{{ block.settings.card_height }}"
                  >
                {% else %}
                  <div class="ai-category-card__image-placeholder-{{ ai_gen_id }}">
                    {{ 'collection-1' | placeholder_svg_tag }}
                  </div>
                {% endif %}<div class="ai-category-card__overlay-{{ ai_gen_id }}">
                  <div class="ai-category-card__content-{{ ai_gen_id }}">
                    <h3 class="ai-category-card__title-{{ ai_gen_id }}">{{ collection.title }}</h3>
                    <p class="ai-category-card__count-{{ ai_gen_id }}">
                      {{ collection.products_count }}{% if collection.products_count == 1 %}
                        product
                      {% else %}
                        products
                      {% endif %}
                    </p>
                  </div>
                </div>
              </div>
            </a>
          {% endif %}
        {% endfor %}
      </div>

      <div class="ai-category-slider__navigation-{{ ai_gen_id }}">
        <button class="ai-category-slider__nav-button-{{ ai_gen_id }}" data-prev aria-label="Previous">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button class="ai-category-slider__nav-button-{{ ai_gen_id }}" data-next aria-label="Next">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>

      <div class="ai-category-slider__dots-{{ ai_gen_id }}" data-dots></div>
    </div>
  </div>
</category-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class CategorySlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.totalSlides = 0;
        this.isMobile = false;}

      connectedCallback() {
        this.track = this.querySelector('[data-track]');
        this.prevButton = this.querySelector('[data-prev]');
        this.nextButton = this.querySelector('[data-next]');
        this.dotsContainer = this.querySelector('[data-dots]');
        this.cards = this.querySelectorAll('.ai-category-card-{{ ai_gen_id }}');
        
        this.init();
        this.setupEventListeners();
        this.checkMobile();
        
        window.addEventListener('resize', () => this.checkMobile());
      }

      init() {
        this.totalSlides = this.cards.length;
        this.createDots();
        this.updateNavigation();
      }

      checkMobile() {
        const wasMobile = this.isMobile;
        this.isMobile = window.innerWidth <= 768;
        
        if (wasMobile !== this.isMobile) {
          this.currentSlide = 0;
          this.updateSlider();
        }
      }

      createDots() {
        if (!this.dotsContainer) return;
        
        this.dotsContainer.innerHTML = '';
        
        for (let i = 0; i < this.totalSlides; i++) {
          const dot = document.createElement('button');
          dot.className = 'ai-category-slider__dot-{{ ai_gen_id }}';
          dot.setAttribute('data-slide', i);
          dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
          if (i === 0) dot.classList.add('active');
          this.dotsContainer.appendChild(dot);
        }
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.prevSlide());
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.nextSlide());
        }

        if (this.dotsContainer) {
          this.dotsContainer.addEventListener('click', (e) => {
            if (e.target.hasAttribute('data-slide')) {
              this.goToSlide(parseInt(e.target.getAttribute('data-slide')));
            }
          });
        }

        if (this.track) {
          this.track.addEventListener('scroll', () => {
            if (this.isMobile) {
              this.updateCurrentSlideFromScroll();
            }
          });
        }
      }

      updateCurrentSlideFromScroll() {
        if (!this.isMobile) return;
        
        const scrollLeft = this.track.scrollLeft;
        const cardWidth = this.cards[0]?.offsetWidth || 0;
        const gap = 16;
        const slideWidth = cardWidth + gap;
        
        this.currentSlide = Math.round(scrollLeft / slideWidth);
        this.updateDots();
        this.updateNavigation();
      }

      prevSlide() {
        if (this.currentSlide > 0) {
          this.currentSlide--;
          this.updateSlider();
        }
      }

      nextSlide() {
        if (this.currentSlide < this.totalSlides - 1) {
          this.currentSlide++;
          this.updateSlider();
        }
      }

      goToSlide(index) {
        this.currentSlide = Math.max(0, Math.min(index, this.totalSlides - 1));
        this.updateSlider();
      }

      updateSlider() {
        if (!this.isMobile) return;
        
        const cardWidth = this.cards[0]?.offsetWidth || 0;
        const gap = 16;
        const slideWidth = cardWidth + gap;
        const scrollLeft = this.currentSlide * slideWidth;
        
        this.track.scrollTo({
          left: scrollLeft,
          behavior: 'smooth'
        });
        this.updateDots();
        this.updateNavigation();
      }

      updateDots() {
        const dots = this.querySelectorAll('.ai-category-slider__dot-{{ ai_gen_id }}');
        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === this.currentSlide);
        });
      }

      updateNavigation() {
        if (this.prevButton) {
          this.prevButton.disabled = this.currentSlide === 0;
        }
        
        if (this.nextButton) {
          this.nextButton.disabled = this.currentSlide >= this.totalSlides - 1;
        }
      }
    }

    customElements.define('category-slider-{{ ai_gen_id }}', CategorySlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Category Slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Shop by Category"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "Discover our curated collections"
    },
    {
      "type": "header",
      "content": "Collections"
    },
    {
      "type": "collection",
      "id": "collection_1",
      "label": "Collection 1"
    },
    {
      "type": "collection",
      "id": "collection_2",
      "label": "Collection 2"
    },
    {
      "type": "collection",
      "id": "collection_3",
      "label": "Collection 3"
    },
    {
      "type": "collection",
      "id": "collection_4",
      "label": "Collection 4"
    },
    {
      "type": "collection",
      "id": "collection_5",
      "label": "Collection 5"
    },
    {
      "type": "collection",
      "id": "collection_6",
      "label": "Collection 6"
    },
    {
      "type": "collection",
      "id": "collection_7",
      "label": "Collection 7"
    },
    {
      "type": "collection",
      "id": "collection_8",
      "label": "Collection 8"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "desktop_columns",
      "min": 2,
      "max": 5,
      "step": 1,
      "label": "Desktop columns",
      "default": 4
    },
    {
      "type": "range",
      "id": "card_height",
      "min": 200,
      "max": 400,
      "step": 20,
      "unit": "px",
      "label": "Card height",
      "default": 280
    },
    {
      "type": "range",
      "id": "card_spacing",
      "min": 10,
      "max": 40,
      "step": 5,
      "unit": "px",
      "label": "Card spacing",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Section padding",
      "default": 60
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 12
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 36
    },
    {
      "type": "range",
      "id": "subheading_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subheading size",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_title_size",
      "min": 14,
      "max": 28,
      "step": 1,
      "unit": "px",
      "label": "Card title size",
      "default": 20
    }
  ],
  "presets": [
    {
      "name": "Category Slider"
    }
  ]
}
{% endschema %}