{%- doc -%}
  Renders a price filter.

  @param {object} filter - The filter object to render.
  @param {string} filter_style - The filter style, can be 'horizontal' or 'vertical'.
  @param {boolean} [autofocus] - Whether to autofocus the filter.
  @param {boolean} [should_render_clear] - Whether to render the clear button.

  @example
  {% render 'price-filter', filter: filter, filter_style: 'vertical' %}
{%- enddoc -%}

<accordion-custom
  class="facets__item"
  {% if filter_style == 'horizontal' %}
    data-disable-animation-on-desktop="true"
    data-close-with-escape="true"
  {% endif %}

  open-by-default-on-mobile
  {% if filter_style == 'vertical' %}
    open
    open-by-default-on-desktop
  {% endif %}
>
  <details
    class="facets__panel"
    {% if filter_style == 'horizontal' %}
      data-auto-close-details="desktop"
    {% endif %}
  >
    <summary class="facets__summary">
      <span class="facets__label">{{ filter.label }}</span>
      <facet-status-component class="facets__status">
        <template ref="moneyFormat">{{ shop.money_format }}</template>

        <span
          class="hide-when-empty"
          ref="facetStatus"
          data-currency="{{ localization.country.currency.iso_code }}"
          data-range-max="{{ filter.range_max }}"
        >
          {%- if filter.min_value.value != null or filter.max_value.value != null %}
            {%- if filter.min_value.value != null and filter.max_value.value != null %}
              {{- filter.min_value.value | money | strip_html -}}
              –
              {{- filter.max_value.value | money | strip_html -}}
            {%- elsif filter.min_value.value != null -%}
              {{ filter.min_value.value | money | strip_html }}–{{ filter.range_max | money | strip_html }}

            {%- elsif filter.max_value.value != null -%}
              {{- 0 | money | strip_html -}}
              –
              {{- filter.max_value.value | money | strip_html -}}
            {%- endif -%}
          {%- endif -%}
        </span>
      </facet-status-component>
      <span class="svg-wrapper icon-caret icon-animated">
        {{- 'icon-caret.svg' | inline_asset_content -}}
      </span>
    </summary>
    <floating-panel-component
      {% unless filter_style == 'vertical' %}
        data-close-on-resize
      {% endunless %}
      class="facets__panel-content details-content{% if filter_style == 'horizontal' %} color-{{ settings.popover_color_scheme }}{% endif %}"
    >
      {% assign min_input_max_value = filter.max_value.value | default: filter.range_max %}
      {% assign max_input_min_value = filter.min_value.value | default: 0 %}

      <price-facet-component class="facets__price facets__price--{{ section.id }}" data-index="{{ forloop.index }}" data-section-id="{{ section.id }}">
  <div class="price-facet__wrapper">

    <!-- Title -->
    <div class="price-facet__title">
      {{ filter.label }}
    </div>

    <!-- Price Inputs -->
    <div class="price-facet__inputs-wrapper">
      <div class="price-facet__input-wrapper">
        <span class="price-facet__currency">{{ cart.currency.symbol }}</span>
        <input
          class="price-facet__input"
          name="{{ filter.min_value.param_name }}"
          id="Filter-{{ filter.label | escape }}-GTE"
          {% if filter.min_value.value %}
            value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"
          {% endif %}
          type="number"
          placeholder="0"
          min="0"
          max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
        >
      </div>
      <span class="price-facet__separator">To</span>
      <div class="price-facet__input-wrapper">
        <span class="price-facet__currency">{{ cart.currency.symbol }}</span>
        <input
          class="price-facet__input"
          name="{{ filter.max_value.param_name }}"
          id="Filter-{{ filter.label | escape }}-LTE"
          {% if filter.max_value.value %}
            value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"
          {% endif %}
          type="number"
          placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
          min="0"
          max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
        >
      </div>
    </div>

    <!-- Double Range Slider -->
    <div class="price-slider">
      <div class="price-slider-track"></div>
      <input type="range" id="price-min-slider"
        min="0"
        max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
        value="{{ filter.min_value.value | default: 0 | money_without_currency | replace: ',', '' }}"
        step="1">
      <input type="range" id="price-max-slider"
        min="0"
        max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
        value="{{ filter.max_value.value | default: filter.range_max | money_without_currency | replace: ',', '' }}"
        step="1">
    </div>

  </div>

  {% javascript %}
    document.addEventListener('DOMContentLoaded', function () {
      const minInput = document.querySelector('.price-facet__input[name*="filter.v.price.gte"]');
      const maxInput = document.querySelector('.price-facet__input[name*="filter.v.price.lte"]');
      const minSlider = document.getElementById('price-min-slider');
      const maxSlider = document.getElementById('price-max-slider');

      if (!minInput || !maxInput || !minSlider || !maxSlider) return;

      function syncFromSlider() {
        let minVal = parseInt(minSlider.value);
        let maxVal = parseInt(maxSlider.value);
        if (minVal > maxVal) [minVal, maxVal] = [maxVal, minVal];
        minInput.value = minVal;
        maxInput.value = maxVal;
      }

      function syncFromInput() {
        minSlider.value = minInput.value || 0;
        maxSlider.value = maxInput.value || maxSlider.max;
      }

      minSlider.addEventListener('input', syncFromSlider);
      maxSlider.addEventListener('input', syncFromSlider);
      minInput.addEventListener('change', syncFromInput);
      maxInput.addEventListener('change', syncFromInput);

      syncFromInput();
    });
  {% endjavascript %}
</price-facet-component>
    </floating-panel-component>
  </details>
</accordion-custom>

{% stylesheet %}
  /* Price filter */
  .price-facet {
    container-type: inline-size;
    display: flex;
    flex-direction: column;
  }

  .facets__inputs-wrapper.price-facet__inputs-wrapper {
    flex-wrap: nowrap;
  }

  .price-facet__field {
    width: 50%;
    flex-grow: 0;
  }

  @container (max-width: 199px) {
    .facets__inputs-wrapper.price-facet__inputs-wrapper {
      flex-wrap: wrap;
      width: 100%;
    }

    .price-facet__inputs-wrapper .price-facet__field {
      width: 100%;
    }
  }

  .facets .facets__inputs-wrapper.price-facet__inputs-wrapper {
    padding: var(--style-border-width-inputs);
    gap: calc(var(--gap-sm) + (var(--style-border-width-inputs) * 2));
  }

  .facets--horizontal .facets__panel-content:has(.price-facet) {
    min-width: 360px;
  }

  .facets--horizontal .facets__inputs-wrapper.price-facet__inputs-wrapper {
    @media screen and (min-width: 750px) {
      padding: calc(var(--padding-md) + var(--style-border-width-inputs));
    }
  }

  .price-facet__input {
    width: 100%;
    text-align: right;
    padding-left: calc(2.5 * var(--input-padding-x));
  }

  .price-facet__input::placeholder {
    color: var(--facets-input-label-color);
  }

  .price-facet__separator {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: var(--font-paragraph--size);
  }

  .price-facet__highest-price {
    padding: var(--padding-xs) 0 var(--padding-sm);
  }

  .facets--horizontal .price-facet__highest-price {
    padding: 0 var(--padding-md) var(--padding-xs);
  }

  .field__label.price-facet__label {
    top: 0;
    left: 0;
    color: var(--facets-input-label-color);
    padding: var(--input-padding-y) var(--input-padding-x);
    transform: none;
  }
{% endstylesheet %}

<style>
  .price-facet__wrapper {
      background: #fff;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }

    .price-facet__inputs-wrapper {
      display: flex;
      justify-content: center;
      gap: 10px;
      align-items: center;
      margin-top: 10px;
    }

    .price-facet__input-wrapper {
      display: flex;
      align-items: center;
      border: 1px solid #ccc;
      padding: 5px 10px;
      border-radius: 4px;
    }

    .price-facet__currency {
      color: #aaa;
      margin-right: 4px;
    }

    /* Slider Styles */
    .price-slider {
      position: relative;
      margin-top: 15px;
      height: 20px;
    }

    .price-slider-track {
      position: absolute;
      height: 2px;
      background: #ccc;
      top: 50%;
      left: 0;
      right: 0;
      transform: translateY(-50%);
      z-index: 1;
    }

    .price-slider input[type=range] {
      position: absolute;
      width: 100%;
      height: 2px;
      -webkit-appearance: none;
      background: transparent;
      pointer-events: none;
      z-index: 2;
    }

    .price-slider input[type=range]::-webkit-slider-thumb {
      pointer-events: auto;
      -webkit-appearance: none;
      height: 16px;
      width: 16px;
      background: black;
      border-radius: 50%;
      cursor: pointer;
    }

    .price-slider input[type=range]::-moz-range-thumb {
      pointer-events: auto;
      height: 16px;
      width: 16px;
      background: black;
      border-radius: 50%;
      cursor: pointer;
    }
</style>