<div
  class="offer-time"
  data-start-days="{{ section.settings.days | default: 0 }}"
  data-start-hours="{{ section.settings.hours | default: 0 }}"
  data-start-minutes="{{ section.settings.minutes | default: 0 }}"
  data-start-seconds="{{ section.settings.seconds | default: 0 }}"
>
  <div class="offer-time-card">
    <p class="offer-time days" id="days">00</p>
    <p class="offer-valid">Days</p>
  </div>
  <div class="offer-time-card">
    <p class="offer-time hours" id="hours">00</p>
    <p class="offer-valid">Hours</p>
  </div>
  <div class="offer-time-card">
    <p class="offer-time minutes" id="minutes">00</p>
    <p class="offer-valid">Min</p>
  </div>
  <div class="offer-time-card">
    <p class="offer-time seconds" id="seconds">00</p>
    <p class="offer-valid">Sec</p>
  </div>
</div>

<style>
  .offer-time {
    display: flex;
  }
  .offer-time-card {
    width: 160px;
    height: 96px;
    border: 1px solid #553E39;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .offer-time {
    font-size: 32px;
    font-weight: 700;
    margin-bottom: 0 !important;
  }
  .offer-valid {
    font-size: 16px;
    font-weight: 600;
    color: #A67E69;
    margin-top: 0 !important;
  }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
      const timerElement = document.querySelector(".offer-time");

      if (!timerElement) return;

      // Get start values from data attributes
      const startDays = parseInt(timerElement.dataset.startDays) || 0;
      const startHours = parseInt(timerElement.dataset.startHours) || 0;
      const startMinutes = parseInt(timerElement.dataset.startMinutes) || 0;
      const startSeconds = parseInt(timerElement.dataset.startSeconds) || 0;

      // Check if end time exists in localStorage
      let endTime = localStorage.getItem("countdownEndTime");

      if (!endTime) {
        // If not stored, set new end time
        endTime = new Date().getTime() + (
          ((startDays * 24 * 60 * 60) +
          (startHours * 60 * 60) +
          (startMinutes * 60) +
          startSeconds) * 1000
        );
        localStorage.setItem("countdownEndTime", endTime);
      } else {
        // Convert back to number
        endTime = parseInt(endTime);
      }

      function updateCountdown() {
        const now = new Date().getTime();
        let distance = endTime - now;

        if (distance <= 0) {
          clearInterval(interval);
          document.getElementById("days").textContent = "00";
          document.getElementById("hours").textContent = "00";
          document.getElementById("minutes").textContent = "00";
          document.getElementById("seconds").textContent = "00";
          localStorage.removeItem("countdownEndTime");
          return;
        }

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        document.getElementById("days").textContent = String(days).padStart(2, "0");
        document.getElementById("hours").textContent = String(hours).padStart(2, "0");
        document.getElementById("minutes").textContent = String(minutes).padStart(2, "0");
        document.getElementById("seconds").textContent = String(seconds).padStart(2, "0");
      }

      updateCountdown();
      const interval = setInterval(updateCountdown, 1000);
    });
  });
</script>

{% schema %}
{
  "name": "Offer Countdown Timer",
  "settings": [
    {
      "type": "number",
      "id": "days",
      "label": "Days",
      "default": 0
    },
    {
      "type": "number",
      "id": "hours",
      "label": "Hours",
      "default": 0
    },
    {
      "type": "number",
      "id": "minutes",
      "label": "Minutes",
      "default": 0
    },
    {
      "type": "number",
      "id": "seconds",
      "label": "Seconds",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "Countdown Timer"
    }
  ]
}
{% endschema %}
